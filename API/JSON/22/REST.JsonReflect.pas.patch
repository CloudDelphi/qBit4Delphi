--- REST.JsonReflect.pas	Tue Aug 31 06:58:22 2021
+++ REST.JsonReflect.pas	Fri Dec 03 13:56:18 2021
@@ -1222,8 +1222,9 @@
   LFieldName := ConvertFieldNameToJson(Field);
   if (Current is TJSONPair) and (TJSONPair(Current).JsonString.Value = LFieldName) then
   begin
-    if TJSONPair(Current).JsonValue = nil then
-      raise EConversionError.Create(Format(SFieldValueMissing, [LFieldName]));
+    // LMR:
+    // if TJSONPair(Current).JsonValue = nil then
+    //  raise EConversionError.Create(Format(SFieldValueMissing, [LFieldName]));
     FStack.Pop;
   end
   else
@@ -1823,7 +1824,11 @@
       TTypeKind.tkMethod:
         raise EConversionError.Create(Format(STypeNotSupported, ['tkMethod']));
       TTypeKind.tkVariant:
-        raise EConversionError.Create(Format(STypeNotSupported, ['tkVariant']));
+      begin
+         // LMR:
+         FConverter.OnNull;
+      	// raise EConversionError.Create(Format(STypeNotSupported, ['tkVariant']));
+      end;
       TTypeKind.tkInterface:
         raise EConversionError.Create(Format(STypeNotSupported, ['tkInterface']));
       TTypeKind.tkClassRef:
@@ -1885,6 +1890,8 @@
           Continue;
         if not ShouldMarshal(Data, rttiField) then
           Continue;
+        if (rttiField.FieldType <> nil) and (rttiField.FieldType.TypeKind = tkClass) and (rttiField.GetValue(Data).AsObject = nil) then
+          continue;
         LFieldName := rttiField.Name;
         if HasConverter(Data.ClassType, LFieldName) then
         begin
@@ -1989,6 +1996,10 @@
   LLenField: TRttiField;
   LItemsField: TRttiField;
 begin
+    // LMR : do not serialize fields starting by '_'
+    if rttiField.Name.StartsWith('_') then
+      Exit(False);
+
   if rttiField.FieldType = nil then
     Exit(False);
   case rttiField.FieldType.TypeKind of
@@ -3102,7 +3113,9 @@
                 else if jsonFieldVal is TJSONNull then
                   revAttr.ObjectsReverter(Data, LDlpFieldName, nil)
                 else
-                  raise EConversionError.Create(Format(SObjectExpectedForField, [FieldName, jsonFieldVal.ToString]));
+                  // LMR:
+                  revAttr.StringReverter(Data, LDlpFieldName, jsonFieldVal.ToString);
+                  // raise EConversionError.Create(Format(SObjectExpectedForField, [FieldName, jsonFieldVal.ToString]));
               end
           else
             raise EConversionError.Create(Format(SNoConversionForType,
@@ -3828,7 +3841,8 @@
 begin
   Assert(Data <> nil);
   // Under ARC there is always a refCount field which we DO NOT WANT serialized
-  if rttiField.Name = 'FRefCount' then
+  // LMR:
+  if (rttiField.Name = 'FRefCount') or (rttiField.Name.StartsWith('_'))  then
   begin
     Result := false;
   end
